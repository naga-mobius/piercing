name: Pierce Model v5
description: Performs piercing (fine-tuning) on the FFN model using symbolic patching with piercing parameters.
inputs:
  - {name: trained_model, type: Model}
  - {name: x_pierce_splits, type: Dataset}
  - {name: y_pierce_splits, type: Dataset}
outputs:
  - {name: pierced_model, type: Model}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        python3 -m pip install --quiet tensorflow keras scikit-learn numpy || \
        python3 -m pip install --quiet tensorflow keras scikit-learn numpy --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import pickle
        import os
        import numpy as np
        import tensorflow as tf
        from sklearn.metrics import accuracy_score
        from sklearn.model_selection import train_test_split
        from keras.optimizers import Adam
        from keras.models import load_model

        # -----------------------
        # Helper functions
        # -----------------------
        def data_prep(x_train, x_test, y_train, y_test):
            x_train = x_train.astype(float) / 255
            x_test = x_test.astype(float) / 255
            y_train = y_train.astype(int)
            y_test = y_test.astype(int)
            train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(len(x_train))
            test_dataset = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(len(x_test))
            return train_dataset, test_dataset

        def get_accuracy(model, x_test, y_test):
            preds = model.predict(x_test)
            preds = preds.reshape((preds.shape[0], preds.shape[1]))
            results = accuracy_score(preds, y_test)
            print(f"Test Accuracy score : {results * 100}%")
            return results

        def pierce_model(model, new_x, new_y, pierce_params):
            model.update_pierce_params(pierce_params)
            epochs = pierce_params.get("epochs", 5)
            required_accuracy = pierce_params.get("accuracy", 0.9)

            x_train, x_test, y_train, y_test = train_test_split(
                new_x, new_y, test_size=0.3, random_state=42, stratify=new_y
            )
            train_dataset, _ = data_prep(x_train, x_test, y_train, y_test)

            model.fit(train_dataset, epochs=epochs)
            prev_accuracy = 0
            accuracy = get_accuracy(model, x_test, y_test)

            while accuracy < required_accuracy and accuracy > prev_accuracy:
                prev_accuracy = accuracy
                params = pierce_params["optimiser_params"]
                params["learning_rate"] = np.random.uniform(0.001, 0.01)
                params["beta_1"] = np.random.uniform(0.9, 0.99)
                params["beta_2"] = np.random.uniform(0.99, 0.9999)
                pierce_params["optimiser"] = pierce_params["optimiser_class"](**params)
                model.update_pierce_params(pierce_params)

                model.fit(train_dataset, epochs=epochs)
                accuracy = get_accuracy(model, x_test, y_test)

        # -----------------------
        # Main script
        # -----------------------
        parser = argparse.ArgumentParser()
        parser.add_argument('--trained_model', type=str, required=True)
        parser.add_argument('--x_pierce_splits', type=str, required=True)
        parser.add_argument('--y_pierce_splits', type=str, required=True)
        parser.add_argument('--pierced_model', type=str, required=True)
        args = parser.parse_args()

        # Load model
        # with open(args.trained_model, "rb") as f:
        #     model = pickle.load(f)
        args.trained_model += ".keras"
        model = load_model(args.trained_model)

        # Load data
        x_splits = np.load(args.x_pierce_splits, allow_pickle=True)
        y_splits = np.load(args.y_pierce_splits, allow_pickle=True)

        # Define piercing parameters
        pierce_params = {
            "epochs": 5,
            "accuracy": 0.9,
            "optimiser_class": Adam,
            "optimiser_params": {
                "learning_rate": 0.01,
                "beta_1": 0.9,
                "beta_2": 0.99
            }
        }

        # Perform piercing on each split
        for new_x, new_y in zip(x_splits, y_splits):
            pierce_model(model, new_x, new_y, pierce_params)

        # Save final pierced model
        # os.makedirs(os.path.dirname(args.pierced_model), exist_ok=True)
        # with open(args.pierced_model, "wb") as f:
        #     pickle.dump(model, f)
        os.makedirs(os.path.dirname(args.pierced_model), exist_ok=True)
        model.save(args.pierced_model + ".keras")   # args.pierced_model should be a directory path
        os.rename(args.pierced_model + ".keras", args.pierced_model)
    args:
      - --trained_model
      - {inputPath: trained_model}
      # - /tmp/outputs/trained_model/data.keras
      - --x_pierce_splits
      - {inputPath: x_pierce_splits}
      - --y_pierce_splits
      - {inputPath: y_pierce_splits}
      - --pierced_model
      - {outputPath: pierced_model}
      # - /tmp/outputs/pierced_model/data.keras
